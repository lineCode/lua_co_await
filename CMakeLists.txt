CMAKE_MINIMUM_REQUIRED (VERSION 3.0)
PROJECT (lua_co_await)

SET (STDLIB stdc++)

ENABLE_TESTING ()

SET (USE_LUA_VERSION "5.1" CACHE STRING "Lua version")
SET_PROPERTY (CACHE USE_LUA_VERSION PROPERTY STRINGS "LuaJIT" "5.1" "5.2" "5.3" "5.4")
SET (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
SET (CMAKE_CXX_STANDARD 20)

STRING (REPLACE "/" "\\" LOCAL_SOURCE_DIR "${PROJECT_SOURCE_DIR}")
INCLUDE_DIRECTORIES ("${PROJECT_BINARY_DIR}")

FILE (GLOB_RECURSE LUA_CO_AWAIT_SRC
	"${PROJECT_SOURCE_DIR}/src/*.h"
	"${PROJECT_SOURCE_DIR}/src/*.cpp"
	"${PROJECT_SOURCE_DIR}/src/*.inl"
)

FOREACH (FILE ${LUA_CO_AWAIT_SRC}) 
	GET_FILENAME_COMPONENT (PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP ("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${LUA_CO_AWAIT_SRC})

IF (${USE_LUA_VERSION} STREQUAL "LuaJIT")
	FIND_PACKAGE (LuaJIT)
ELSE (${USE_LUA_VERSION} STREQUAL "LuaJIT")
	FIND_PACKAGE (Lua ${USE_LUA_VERSION} REQUIRED)
ENDIF (${USE_LUA_VERSION} STREQUAL "LuaJIT")

IF (LUA_FOUND OR LUAJIT_FOUND)
	MESSAGE (STATUS "Find lua version " ${USE_LUA_VERSION})
	FILE (GLOB_RECURSE LUA_CORE_SRC
		"${LUA_INCLUDE_DIR}/*.h"
		"${LUA_INCLUDE_DIR}/*.hpp"
	)

	SET (LUALIB ${LUA_LIBRARIES})
ELSE (LUA_FOUND OR LUAJIT_FOUND)
	MESSAGE (FATAL_ERROR "Unable to find lua with version " ${USE_LUA_VERSION})
ENDIF (LUA_FOUND OR LUAJIT_FOUND)

IF (MSVC)
	SET (EXTRA_DEFINES LUA_BUILD_AS_DLL)
ELSE (MSVC)
	SET (EXTRA_DEFINES)
ENDIF (MSVC)

SET (TARGET_NAME lua_co_await)
ADD_LIBRARY (${TARGET_NAME} SHARED ${LUA_CO_AWAIT_SRC} ${LUA_CORE_SRC})
TARGET_INCLUDE_DIRECTORIES (${TARGET_NAME} PRIVATE ${LUA_INCLUDE_DIR})
TARGET_COMPILE_DEFINITIONS (${TARGET_NAME} PRIVATE USE_LUA_LIBRARY ${EXTRA_DEFINES})
TARGET_LINK_LIBRARIES (${TARGET_NAME} ${LUALIB})
SET_TARGET_PROPERTIES (${TARGET_NAME} PROPERTIES PREFIX "")
